document.addEventListener('DOMContentLoaded', function () {

    // Textos est√°ticos (no dependen de la api)
    const countdownDisplay = document.querySelector('#countdown');
    const trafficStatus = document.querySelector('#traffic-status');
    const dateDisplay = document.querySelector('#date');
    const flightsTable = document.querySelector('#flights-table');
    const alertMeWhen = document.querySelector('#alert-me-when');
    const languageSelector = document.getElementById('language-selector');

    // Traducciones por idioma
    const translations = {
        en: {
            countdown: "Left for closing",
            flightCode: "Flight Code",
            expectedTime: "Expected Time",
            flightStatus: "Status",
            loadingService: "Loading service",
            description: "The main purpose of this page is to allow you to quickly check if the border will be temporarily closed due to air traffic when you are heading to cross it. The system operates in real time and adapts the information provided by Gibraltar Airport. With this tool, you can avoid the inconvenient waiting time caused by airplane landings or take-offs by either anticipating your crossing or choosing a more convenient time.",
            airportStatus: ["Airport open", "Closing soon", "Closing", "Probably closed"],
            flightsFor: "Flights schedule for",
            noticeMeWhen: "Alert me when",
            notificationMessage: ["Gibraltar Airport üá¨üáÆ closing in", "Hurry up crossing the border! The airport is closing soon."],
        },
        es: {
            countdown: "Para el cierre",
            flightCode: "C√≥digo de Vuelo",
            expectedTime: "Hora Estimada",
            flightStatus: "Estado",
            loadingService: "Cargando servicio",
            description: "El prop√≥sito principal de esta p√°gina es permitirte comprobar r√°pidamente si la frontera se cerrar√° temporalmente debido al tr√°fico a√©reo cuando te diriges a cruzarla. El sistema opera en tiempo real y adapta la informaci√≥n proporcionada por el Aeropuerto de Gibraltar. Con esta herramienta, puedes evitar el inconveniente tiempo de espera causado por los aterrizajes o despegues de aviones anticipando tu cruce o eligiendo un momento m√°s conveniente.",
            airportStatus: ["Aeropuerto abierto", "Cerrando pronto", "Cerrando", "Probablemente cerrado"],
            flightsFor: "Horario de vuelos para",
            noticeMeWhen: "Av√≠same cuando",
            notificationMessage: ["Aeropuerto de Gibraltar üá¨üáÆ cerrando en", "¬°Ap√∫rate a cruzar la frontera! El aeropuerto est√° cerrando pronto."],
        },
        pt: {
            countdown: "Para o fechamento",
            flightCode: "C√≥digo do Voo",
            expectedTime: "Hora Esperada",
            flightStatus: "Status",
            loadingService: "Carregando servi√ßo",
            description: "O principal objetivo desta p√°gina √© permitir que voc√™ verifique rapidamente se a fronteira ser√° temporariamente fechada devido ao tr√°fego a√©reo quando voc√™ estiver indo cruz√°-la. O sistema opera em tempo real e adapta as informa√ß√µes fornecidas pelo Aeroporto de Gibraltar. Com esta ferramenta, voc√™ pode evitar o inconveniente tempo de espera causado pelos pousos ou decolagens de avi√µes, antecipando sua travessia ou escolhendo um momento mais conveniente.",
            airportStatus: ["Aeroporto aberto", "Fechando em breve", "Fechando", "Provavelmente fechado"],
            flightsFor: "Hor√°rio de voos para",
            noticeMeWhen: "Avise-me quando",
            notificationMessage: ["Aeroporto de Gibraltar üá¨üáÆ fechando em", "Apresse-se para cruzar a fronteira! O aeroporto est√° fechando em breve."],
        },
        cn: {
            countdown: "Ââ©‰ΩôÊó∂Èó¥ÂÖ≥Èó≠",
            flightCode: "Ëà™Áè≠‰ª£Á†Å",
            expectedTime: "È¢ÑËÆ°Êó∂Èó¥",
            flightStatus: "Áä∂ÊÄÅ",
            loadingService: "Âä†ËΩΩÊúçÂä°",
            description: "Ê≠§È°µÈù¢ÁöÑ‰∏ªË¶ÅÁõÆÁöÑÊòØÂÖÅËÆ∏ÊÇ®Âø´ÈÄüÊ£ÄÊü•ËæπÂ¢ÉÊòØÂê¶Áî±‰∫éËà™Á©∫‰∫§ÈÄöÊöÇÊó∂ÂÖ≥Èó≠ÔºåÂΩìÊÇ®ÂáÜÂ§áËøáÂ¢ÉÊó∂„ÄÇÁ≥ªÁªüÂÆûÊó∂ËøêË°åÔºåÂπ∂Ê†πÊçÆÁõ¥Â∏ÉÁΩóÈôÄÊú∫Âú∫Êèê‰æõÁöÑ‰ø°ÊÅØËøõË°åË∞ÉÊï¥„ÄÇÈÄöËøáËøô‰∏™Â∑•ÂÖ∑ÔºåÊÇ®ÂèØ‰ª•ÈÅøÂÖçÂõ†È£ûÊú∫ÁùÄÈôÜÊàñËµ∑È£ûËÄåÂØºËá¥ÁöÑ‰∏ç‰æøÁ≠âÂæÖÊó∂Èó¥ÔºåÊÇ®ÂèØ‰ª•ÊèêÂâçÂÆâÊéíËøáÂ¢ÉÊàñÈÄâÊã©Êõ¥Êñπ‰æøÁöÑÊó∂Èó¥„ÄÇ",
            airportStatus: ["Êú∫Âú∫ÂºÄÊîæ", "Âç≥Â∞ÜÂÖ≥Èó≠", "ÂÖ≥Èó≠", "ÂèØËÉΩÂÖ≥Èó≠"],
            flightsFor: "Ëà™Áè≠Êó∂ÂàªË°®",
            noticeMeWhen: "ÂΩì...Êó∂ÊèêÈÜíÊàë",
            notificationMessage: ["Áõ¥Â∏ÉÁΩóÈôÄÊú∫Âú∫ üá¨üáÆ Ââ©‰ΩôÊó∂Èó¥ÂÖ≥Èó≠", "Âø´ÁÇπËøáÂ¢ÉÔºÅÊú∫Âú∫Âç≥Â∞ÜÂÖ≥Èó≠„ÄÇ"],
        },
        ar: {
            countdown: "ÿßŸÑŸÖÿ™ÿ®ŸÇŸä ŸÑÿ•ÿ∫ŸÑÿßŸÇ",
            flightCode: "ÿ±ŸÖÿ≤ ÿßŸÑÿ±ÿ≠ŸÑÿ©",
            expectedTime: "ÿßŸÑŸàŸÇÿ™ ÿßŸÑŸÖÿ™ŸàŸÇÿπ",
            flightStatus: "ÿßŸÑÿ≠ÿßŸÑÿ©",
            loadingService: "ÿ¨ÿßÿ±Ÿç ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿÆÿØŸÖÿ©",
            description: "ÿßŸÑŸáÿØŸÅ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿä ŸÖŸÜ Ÿáÿ∞Ÿá ÿßŸÑÿµŸÅÿ≠ÿ© ŸáŸà ÿßŸÑÿ≥ŸÖÿßÿ≠ ŸÑŸÉ ÿ®ÿßŸÑÿ™ÿ≠ŸÇŸÇ ÿ®ÿ≥ÿ±ÿπÿ© ŸÖŸÖÿß ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ÿßŸÑÿ≠ÿØŸàÿØ ÿ≥ÿ™ÿ∫ŸÑŸÇ ŸÖÿ§ŸÇÿ™Ÿãÿß ÿ®ÿ≥ÿ®ÿ® ÿ≠ÿ±ŸÉÿ© ÿßŸÑÿ∑Ÿäÿ±ÿßŸÜ ÿπŸÜÿØŸÖÿß ÿ™ÿ™ÿ¨Ÿá ŸÑÿπÿ®Ÿàÿ± ÿßŸÑÿ≠ÿØŸàÿØ. ŸäÿπŸÖŸÑ ÿßŸÑŸÜÿ∏ÿßŸÖ ŸÅŸä ÿßŸÑŸàŸÇÿ™ ÿßŸÑŸÅÿπŸÑŸä ŸàŸäŸÉŸäŸÅ ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑŸÖŸÇÿØŸÖÿ© ŸÖŸÜ ŸÖÿ∑ÿßÿ± ÿ¨ÿ®ŸÑ ÿ∑ÿßÿ±ŸÇ. ŸÖÿπ Ÿáÿ∞Ÿá ÿßŸÑÿ£ÿØÿßÿ©ÿå ŸäŸÖŸÉŸÜŸÉ ÿ™ÿ¨ŸÜÿ® ŸàŸÇÿ™ ÿßŸÑÿßŸÜÿ™ÿ∏ÿßÿ± ÿßŸÑŸÖÿ≤ÿπÿ¨ ÿßŸÑÿ∞Ÿä ÿ™ÿ≥ÿ®ÿ®Ÿá Ÿáÿ®Ÿàÿ∑ ÿßŸÑÿ∑ÿßÿ¶ÿ±ÿßÿ™ ÿ£Ÿà ÿ•ŸÇŸÑÿßÿπŸáÿß ÿπŸÜ ÿ∑ÿ±ŸäŸÇ ÿßŸÑÿ™ŸÜÿ®ÿ§ ÿ®ÿπÿ®Ÿàÿ±ŸÉ ÿ£Ÿà ÿßÿÆÿ™Ÿäÿßÿ± ŸàŸÇÿ™ ÿ£ŸÉÿ´ÿ± ŸÖŸÑÿßÿ°ŸÖÿ©.",
            airportStatus: ["ÿßŸÑŸÖÿ∑ÿßÿ± ŸÖŸÅÿ™Ÿàÿ≠", "Ÿäÿ∫ŸÑŸÇ ŸÇÿ±Ÿäÿ®Ÿãÿß", "Ÿäÿ∫ŸÑŸÇ", "ŸÖÿ∫ŸÑŸÇ ÿπŸÑŸâ ÿßŸÑÿ£ÿ±ÿ¨ÿ≠"],
            flightsFor: "ÿ¨ÿØŸàŸÑ ÿßŸÑÿ±ÿ≠ŸÑÿßÿ™ ŸÑŸÄ",
            noticeMeWhen: "ÿ£ÿπŸÑŸÖŸÜŸä ÿπŸÜÿØŸÖÿß",
            notificationMessage: ["ŸÖÿ∑ÿßÿ± ÿ¨ÿ®ŸÑ ÿ∑ÿßÿ±ŸÇ üá¨üáÆ Ÿäÿ∫ŸÑŸÇ ŸÅŸä", "ÿ£ÿ≥ÿ±ÿπ ŸÅŸä ÿπÿ®Ÿàÿ± ÿßŸÑÿ≠ÿØŸàÿØ! ÿßŸÑŸÖÿ∑ÿßÿ± Ÿäÿ∫ŸÑŸÇ ŸÇÿ±Ÿäÿ®Ÿãÿß."],
        }
    };


    // Obtener el idioma del almacenamiento local o usar 'en' como predeterminado
    let currentLang = localStorage.getItem('language') || 'en';
    let currentApiData = {};

    // Funci√≥n para actualizar los textos est√°ticos con la traducci√≥n correcta
    function updateTextContent(trans) {
        countdownDisplay.textContent = trans.countdown;
        document.querySelector('#flight-code-header').textContent = trans.flightCode;
        document.querySelector('#expected-time-header').textContent = trans.expectedTime;
        document.querySelector('#flight-status-header').textContent = trans.flightStatus;
        document.querySelector('#description').textContent = trans.description;
        document.querySelector('#current-date-label').textContent = trans.flightsFor;
        document.querySelector('#alert-me-when').textContent = trans.noticeMeWhen;

    }

    // Funci√≥n para cambiar el idioma
    function applyTranslations(lang) {
        const trans = translations[lang] || translations.en;
        updateTextContent(trans);

        if (currentApiData.airport_status) {
            const statusIndex = trans.airportStatus.indexOf(currentApiData.airport_status);
            if (statusIndex !== -1) {
                trafficStatus.textContent = trans.airportStatus[statusIndex];
            }
        }
    }

    // Cambiar el idioma al seleccionar una opci√≥n en el selector
    languageSelector.addEventListener('change', function () {
        const selectedLang = languageSelector.value;
        localStorage.setItem('language', selectedLang);  // Guardar el idioma seleccionado
        location.reload();  // Recargar la p√°gina para aplicar la nueva configuraci√≥n de idioma
    });

    // Script para alternar entre las campanas activas y desactivadas
    const bellOn = document.getElementById("bell-on");
    const bellOff = document.getElementById("bell-off");

    bellOn.addEventListener("click", () => {
        requestNotificationPermission();
    });

    bellOff.addEventListener("click", () => {
        requestNotificationPermission();
    });

    // Si el usuario ya tiene activadas las notificaciones, mostramos la campana activa
    // Esto es un ejemplo de c√≥mo podr√≠as manejar el estado de las notificaciones

    if (Notification.permission === "granted") {
        bellOn.classList.remove("text-gray-400");
        bellOn.classList.add("text-green-400");

        bellOff.classList.remove("text-red-400");
        bellOff.classList.add("text-gray-400");
    } else if (Notification.permission !== "denied") {
        bellOff.classList.remove("text-gray-400");
        bellOff.classList.add("text-red-400");

        bellOn.classList.remove("text-green-400");
        bellOn.classList.add("text-gray-400");
    }

    const notificationPreferences = document.getElementById('notification-preferences');

    // Guardar el tiempo seleccionado en el almacenamiento local al iniciar la p√°gina
    localStorage.setItem('notificationTime', notificationPreferences.value);

    notificationPreferences.addEventListener('change', function () {

        if (Notification.permission !== "denied") {
            requestNotificationPermission();
        }

        const selectedTime = notificationPreferences.value;  // Tiempo seleccionado en minutos
        console.log("Selected time:", selectedTime);

        // Guardar el tiempo seleccionado en el almacenamiento local
        localStorage.setItem('notificationTime', selectedTime);
    });

    // Al cargar la p√°gina, si hay un valor guardado en localStorage, establecerlo en el elemento
    window.addEventListener('load', function () {
        const savedTime = localStorage.getItem('notificationTime');
        if (savedTime) {
            notificationPreferences.value = savedTime;
            console.log("Loaded saved time:", savedTime);
        }
    });



    // Actualizar los datos
    async function updateData() {
        try {
            const response = await fetch('/api/next_flight');
            const data = await response.json();
            const { current_time, next_flight, time_remaining, airport_status } = data;

            currentApiData = data;

            updateCountdown(time_remaining);
            updateAirportStatus(airport_status);
            todaysSchedulePreviousMessageCurrentDay(next_flight.date);

            dateDisplay.textContent = current_time;

            // Mandar notificaci√≥n si es necesario
            let savedTime = localStorage.getItem('notificationTime');
            let alertTrigger = 0;

            try {
                alertTrigger = time_remaining.split(' ')[1].replace('m', '');
            } catch (error) {
                alertTrigger = time_remaining.replace('m', '');
            }

            if (alertTrigger == savedTime) {
                sendNotification(`${translations[currentLang]?.notificationMessage[0]} ${time_remaining}`, translations[currentLang]?.notificationMessage[1]);
            }

            // Mostrar vuelos correspondientes a la fecha del pr√≥ximo vuelo
            showTodaysFlights(data.next_flight.datetime.split(' ')[0]);

        } catch (error) {
            console.error("Error fetching remaining time:", error);
        }
    }

    function todaysSchedulePreviousMessageCurrentDay(next_flight_date) {
        const date = new Date(next_flight_date);

        // Asegurarse de que el idioma es correcto, y usar 'zh-CN' si es chino simplificado
        const lang = currentLang === 'cn' ? 'zh-CN' : currentLang;

        // Opciones para obtener el nombre del d√≠a de la semana, el d√≠a, el mes y el a√±o
        const options = {
            weekday: 'long',  // D√≠a de la semana completo (Monday, Lunes, Segunda-feira, etc.)
            day: 'numeric',   // D√≠a num√©rico (27)
            month: 'long',    // Mes completo (January, Enero, Janeiro, etc.)
            year: 'numeric'   // A√±o completo (2025)
        };

        // Usamos Intl.DateTimeFormat para formatear la fecha seg√∫n el idioma actual
        const formattedDate = new Intl.DateTimeFormat(lang, options).format(date);

        // Establecemos el texto traducido para la fecha
        document.getElementById('current-date').innerHTML = formattedDate;
    }

    function updateCountdown(remaining_time) {
        let remainingMinutes = parseInt(remaining_time.split(':')[0]);

        if (remainingMinutes < 0) {
            countdownDisplay.textContent = "Waiting for the airport to open again";
        } else {
            countdownDisplay.textContent = `${remaining_time} ${translations[currentLang]?.countdown || translations.en.countdown}`;
        }
    }

    function updateAirportStatus(airport_status) {
        const statusTranslations = translations[currentLang]?.airportStatus || translations.en.airportStatus;

        const statusMap = {
            "open": statusTranslations[0],
            "slosing_soon": statusTranslations[1],
            "closing": statusTranslations[2],
            "closed": statusTranslations[3]
        };

        trafficStatus.textContent = statusMap[airport_status] || statusTranslations[0];

        trafficStatus.classList.remove('text-red-500', 'text-yellow-200', 'text-green-300', 'text-red-400');

        if (airport_status === "closed") {
            trafficStatus.classList.add('text-red-400');
        } else if (airport_status === "closing") {
            trafficStatus.classList.add('text-red-500');
        } else if (airport_status === "closing_soon") {
            trafficStatus.classList.add('text-yellow-200');
        } else if (airport_status === "open") {
            trafficStatus.classList.add('text-green-300');
        }

        trafficStatus.classList.toggle('closed', airport_status !== 'Airport open');
    }

    async function showTodaysFlights(flightDate) {
        try {
            const response = await fetch(`/api/todays_flights?date=${flightDate}`);
            const flights = await response.json();

            flightsTable.innerHTML = '';

            const nextFlight = flights.find(flight => flight.status === 'Scheduled' || flight.status === 'Estimated');

            flights.forEach((flight) => {
                const flightRow = document.createElement('tr');
                flightRow.classList.add('text-center');

                let statusTextColorClass = '';
                let statusBackgroundClass = '';
                let flightTextStyleClass = 'text-white';

                if (flight.status === 'Arrived' || flight.status === 'Departed' || flight.status === 'Diverted' || flight.status === 'Delayed') {
                    statusTextColorClass = 'text-green-500';
                    flightTextStyleClass = 'line-through text-gray-200';
                }

                if (flight === nextFlight) {
                    statusTextColorClass = 'text-yellow-400';
                    statusBackgroundClass = 'bg-gray-600';
                }

                flightRow.innerHTML = `
                    <td class="px-4 py-2 ${statusBackgroundClass} ${flightTextStyleClass}">${flight.flight_code}</td>
                    <td class="px-4 py-2 ${statusBackgroundClass} ${flightTextStyleClass}">${flight.expected_time}</td>
                    <td class="px-4 py-2 ${statusBackgroundClass} ${statusTextColorClass}">${flight.status}</td>
                `;

                flightsTable.appendChild(flightRow);
            });

        } catch (error) {
            console.error("Error fetching today's flights:", error);
            flightsTable.innerHTML = `<tr><td colspan="3">Error retrieving today's flights: ${error.message}</td></tr>`;
        }
    }

    // Funci√≥n para solicitar permisos de notificaci√≥n
    function requestNotificationPermission() {
        if (Notification.permission === "granted") {
            console.log("Permiso ya concedido.");
        } else if (Notification.permission !== "denied") {
            Notification.requestPermission().then((permission) => {
                if (permission === "granted") {
                    console.log("Permiso concedido.");
                    location.reload();
                } else {
                    console.log("Permiso denegado.");
                }
            });
        }
    }

    // Funci√≥n para enviar la notificaci√≥n
    function sendNotification(title, body) {
        if (Notification.permission === "granted") {
            new Notification(title, {
                body: body,
                icon: "icono.png", // Ruta a un icono (opcional)
            });
        }
    }

    // Llamada inicial
    applyTranslations(currentLang);  // Aplicar traducci√≥n en base al idioma
    updateData();

    // Actualizar cada minuto
    setInterval(updateData, 60000); // Refresh remaining time
});
